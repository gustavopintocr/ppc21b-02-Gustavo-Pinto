procedure main(argc, argv[])

  if argc > 1 do
    shared thread_count := integer(argv[1])
  else do
    shared thread_count := SYSTEM(CPUs)
  end if

  array_int array
  start_array(&array)
  int number
  shared counter = 0

  while (number = stdin.value) == 1 do
    insert_value(&array,numero)
    counter++
  end while

  shared array_position := 0
  shared can_access_next_position := create_mutex()
  create_threads(thread_count)

end procedure


procedure create_threads(thread_count)

  capacity = array->counter;
  
  #pragma omp parallel for num_threads(thread_count) \
  schedule(dynamic) shared(array, capacity)
    for (int index = 0; index < capacity; index++) {
      factorize(array, index);
    }
    end for

end procedure 

procedure routine_factorize(thread_number,array)
  
  while true do
  
    if posicion_array > counter do
      lock(can_access_next_position)
      my_position = array_position
      array_position++
      unlock(can_access_next_position)
      break
    end

    factorize(array,my_position)

  end while

end procedure
